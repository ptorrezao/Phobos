/*!
 * Mvc.Grid 2.3.2
 * https://github.com/NonFactors/MVC5.Grid
 *
 * Copyright © NonFactors
 *
 * Licensed under the terms of the MIT License
 * http://www.opensource.org/licenses/mit-license.php
 */
var MvcGrid = function () { function e(e, t) { if (this.columns = [], this.element = e, t = t || {}, this.name = e.data("name") || "", this.rowClicked = t.rowClicked, this.reloadEnded = t.reloadEnded, this.reloadFailed = t.reloadFailed, this.reloadStarted = t.reloadStarted, this.sourceUrl = t.sourceUrl || e.data("source-url") || "", this.filters = $.extend({ Text: new MvcGridTextFilter, Date: new MvcGridDateFilter, Number: new MvcGridNumberFilter, Boolean: new MvcGridBooleanFilter }, t.filters), "" != this.sourceUrl) { var i = this.sourceUrl.indexOf("?"); i > -1 ? (this.gridQuery = this.sourceUrl.substring(i + 1), this.sourceUrl = this.sourceUrl.substring(0, i)) : this.gridQuery = t.query || "" } else this.gridQuery = window.location.search.replace("?", ""); if (t.reload === !0 || "" != this.sourceUrl && !t.isLoaded) return void this.reload(this.gridQuery); for (var r = e.find(".mvc-grid-header"), n = 0; n < r.length; n++) { var a = this.createColumn($(r[n])); this.applyFiltering(a), this.applySorting(a), this.columns.push(a), this.cleanHeader(a) } for (var o = e.find(".mvc-grid-pager div"), l = 0; l < o.length; l++) this.applyPaging($(o[l])); o = e.find(".mvc-grid-pager span"); for (var l = 0; l < o.length; l++) this.applyPaging($(o[l])); this.bindGridEvents(), this.cleanGrid(e) } return e.prototype = { createColumn: function (e) { return { name: e.data("name") || "", header: e, filter: { isEnabled: "True" == e.data("filterable"), isMulti: "True" == e.data("filter-multi"), operator: e.data("filter-operator") || "", name: e.data("filter-name") || "", first: { type: e.data("filter-first-type") || "", val: e.data("filter-first-val") || "" }, second: { type: e.data("filter-second-type") || "", val: e.data("filter-second-val") || "" } }, sort: { isEnabled: "True" == e.data("sortable"), firstOrder: e.data("sort-first") || "", order: e.data("sort-order") || "" } } }, set: function (e) { this.filters = $.extend(this.filters, e.filters), this.rowClicked = e.rowClicked || this.rowClicked, this.reloadEnded = e.reloadEnded || this.reloadEnded, this.reloadFailed = e.reloadFailed || this.reloadFailed, this.reloadStarted = e.reloadStarted || this.reloadStarted, e.reload === !0 && this.reload(this.gridQuery) }, applyFiltering: function (e) { var t = this; e.filter.isEnabled && e.header.find(".mvc-grid-filter").on("click.mvcgrid", function () { t.renderFilter(e) }) }, applySorting: function (e) { var t = this; e.sort.isEnabled && e.header.on("click.mvcgrid", function (i) { var r = $(i.target || i.srcElement); r.hasClass("mvc-grid-filter") || 0 != r.parents(".mvc-grid-filter").length || t.reload(t.formSortQuery(e)) }) }, applyPaging: function (e) { var t = e.data("page") || "", i = this; "" != t && e.on("click.mvcgrid", function () { i.reload(i.formPageQuery(t)) }) }, reload: function (e) { var t = this; "" != t.sourceUrl ? (t.reloadStarted && t.reloadStarted(t), $.ajax({ cache: !1, url: t.sourceUrl + "?" + e }).success(function (i) { t.element.hide(), t.element.after(i); var r = t.element.next(".mvc-grid").mvcgrid({ reloadStarted: t.reloadStarted, reloadFailed: t.reloadFailed, reloadEnded: t.reloadEnded, rowClicked: t.rowClicked, sourceUrl: t.sourceUrl, filters: t.filters, isLoaded: !0, query: e }).data("mvc-grid"); t.element.remove(), t.reloadEnded && t.reloadEnded(r) }).error(function (e) { t.reloadFailed && t.reloadFailed(t, e) })) : window.location.href = "?" + e }, renderFilter: function (e) { var t = $("body").children(".mvc-grid-popup"), i = this.filters[e.filter.name]; i ? (i.render(t, e.filter), i.init(this, e, t), this.setFilterPosition(e, t), t.addClass("open"), $(window).on("click.mvcgrid", function (e) { var i = $(e.target || e.srcElement); i.hasClass("mvc-grid-filter") || 0 != i.parents(".mvc-grid-popup").length || i.is('[class*="ui-datepicker"]') || 0 != i.parents('[class*="ui-datepicker"]').length || ($(window).off("click.mvcgrid"), t.removeClass("open")) })) : ($(window).off("click.mvcgrid"), t.removeClass("open")) }, setFilterPosition: function (e, t) { var i = e.header.find(".mvc-grid-filter"), r = t.find(".popup-arrow"), n = i.offset().left, a = i.offset().top, o = i.height(), l = $(window).width(), s = t.width(), d = a + o / 2 + 14, c = n - 8, p = 15; n + s + 5 > l && (c = l - s - 14, p = n - c + 7), r.css("left", p + "px"), t.css("left", c + "px"), t.css("top", d + "px") }, formFilterQuery: function (e) { for (var t = encodeURIComponent(this.name + "-" + e.name + "-" + e.filter.second.type), i = encodeURIComponent(this.name + "-" + e.name + "-" + e.filter.first.type), r = encodeURIComponent(this.name + "-" + e.name + "-Op"), n = encodeURIComponent(this.name + "-" + e.name + "-"), a = encodeURIComponent(e.filter.operator), o = encodeURIComponent(e.filter.second.val), l = encodeURIComponent(e.filter.first.val), s = encodeURIComponent(this.name + "-Page"), d = this.gridQuery.split("&"), c = !1, p = !1, u = !1, v = [], f = 0; f < d.length; f++) { var h = d[f].split("=")[0]; if ("" != d[f] && h != s) { if (0 == h.indexOf(n)) if (h != r || u) if (p) { if (p && !c) { if (!e.filter.isMulti) continue; d[f] = t + "=" + o, c = !0 } } else d[f] = i + "=" + l, p = !0; else { if (!e.filter.isMulti) continue; d[f] = h + "=" + a, u = !0 } v.push(d[f]) } } return p || v.push(i + "=" + l), !u && e.filter.isMulti && v.push(r + "=" + a), !c && e.filter.isMulti && v.push(t + "=" + o), v.join("&") }, formFilterQueryWithout: function (e) { for (var t = encodeURIComponent(this.name + "-" + e.name + "-"), i = encodeURIComponent(this.name + "-Page"), r = this.gridQuery.split("&"), n = [], a = 0; a < r.length; a++) { var o = r[a].split("=")[0]; "" != r[a] && o != i && 0 != o.indexOf(t) && n.push(r[a]) } return n.join("&") }, formSortQuery: function (e) { var t = this.addOrReplace(this.gridQuery, this.name + "-Sort", e.name), i = "Asc" == e.sort.order ? "Desc" : "Asc"; return "" == e.sort.order && "" != e.sort.firstOrder && (i = e.sort.firstOrder), this.addOrReplace(t, this.name + "-Order", i) }, formPageQuery: function (e) { return this.addOrReplace(this.gridQuery, this.name + "-Page", e) }, addOrReplace: function (e, t, i) { i = encodeURIComponent(i), t = encodeURIComponent(t); for (var r = e.split("&"), n = !1, a = [], o = 0; o < r.length; o++) if ("" != r[o]) { var l = r[o].split("=")[0]; l == t && (r[o] = t + "=" + i, n = !0), a.push(r[o]) } return n || a.push(t + "=" + i), a.join("&") }, bindGridEvents: function () { var e = this; this.element.find(".mvc-grid-row").on("click.mvcgrid", function (t) { if (e.rowClicked) { for (var i = $(this).find("td"), r = [], n = 0; n < e.columns.length; n++) { var a = e.columns[n]; i.length > n && (r[a.name] = $(i[n]).text()) } e.rowClicked(e, this, r, t) } }) }, cleanHeader: function (e) { var t = e.header; t.removeAttr("data-name"), t.removeAttr("data-filterable"), t.removeAttr("data-filter-name"), t.removeAttr("data-filter-multi"), t.removeAttr("data-filter-operator"), t.removeAttr("data-filter-first-val"), t.removeAttr("data-filter-first-type"), t.removeAttr("data-filter-second-val"), t.removeAttr("data-filter-second-type"), t.removeAttr("data-sortable"), t.removeAttr("data-sort-order"), t.removeAttr("data-sort-first") }, cleanGrid: function (e) { e.removeAttr("data-source-url"), e.removeAttr("data-name") } }, e }(), MvcGridTextFilter = function () { function e() { } return e.prototype = { render: function (e, t) { var i = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter, r = $.fn.mvcgrid.lang.Operator, n = $.fn.mvcgrid.lang.Text; e.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><select class="mvc-grid-type"><option value="Contains"' + ("Contains" == t.first.type ? ' selected="selected"' : "") + ">" + n.Contains + '</option><option value="Equals"' + ("Equals" == t.first.type ? ' selected="selected"' : "") + ">" + n.Equals + '</option><option value="StartsWith"' + ("StartsWith" == t.first.type ? ' selected="selected"' : "") + ">" + n.StartsWith + '</option><option value="EndsWith"' + ("EndsWith" == t.first.type ? ' selected="selected"' : "") + ">" + n.EndsWith + '</option></select></div><div class="first-filter popup-group"><input class="mvc-grid-input" type="text" value="' + t.first.val + '"></div>' + (t.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + r.Select + '</option><option value="And"' + ("And" == t.operator ? ' selected="selected"' : "") + ">" + r.And + '</option><option value="Or"' + ("Or" == t.operator ? ' selected="selected"' : "") + ">" + r.Or + '</option></select></div><div class="second-filter popup-group"><select class="mvc-grid-type"><option value="Contains"' + ("Contains" == t.second.type ? ' selected="selected"' : "") + ">" + n.Contains + '</option><option value="Equals"' + ("Equals" == t.second.type ? ' selected="selected"' : "") + ">" + n.Equals + '</option><option value="StartsWith"' + ("StartsWith" == t.second.type ? ' selected="selected"' : "") + ">" + n.StartsWith + '</option><option value="EndsWith"' + ("EndsWith" == t.second.type ? ' selected="selected"' : "") + ">" + n.EndsWith + '</option></select></div><div class="second-filter popup-group"><input class="mvc-grid-input" type="text" value="' + t.second.val + '"></div>' : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + i.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + i.Remove + "</button></div></div>") }, init: function (e, t, i) { this.bindType(e, t, i), this.bindValue(e, t, i), this.bindApply(e, t, i), this.bindCancel(e, t, i), this.bindOperator(e, t, i) }, bindType: function (e, t, i) { var r = i.find(".first-filter .mvc-grid-type"); r.on("change.mvcgrid", function () { t.filter.first.type = this.value }), r.change(); var n = i.find(".second-filter .mvc-grid-type"); n.on("change.mvcgrid", function () { t.filter.second.type = this.value }), n.change() }, bindValue: function (e, t, i) { var r = i.find(".first-filter .mvc-grid-input"); r.on("keyup.mvcgrid", function (e) { t.filter.first.val = this.value, 13 == e.which && i.find(".mvc-grid-apply").click() }); var n = i.find(".second-filter .mvc-grid-input"); n.on("keyup.mvcgrid", function (e) { t.filter.second.val = this.value, 13 == e.which && i.find(".mvc-grid-apply").click() }) }, bindApply: function (e, t, i) { var r = i.find(".mvc-grid-apply"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQuery(t)) }) }, bindCancel: function (e, t, i) { var r = i.find(".mvc-grid-cancel"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQueryWithout(t)) }) }, bindOperator: function (e, t, i) { var r = i.find(".mvc-grid-operator"); r.on("change.mvcgrid", function () { t.filter.operator = this.value }) } }, e }(), MvcGridNumberFilter = function () { function e() { } return e.prototype = { render: function (e, t) { var i = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter, r = $.fn.mvcgrid.lang.Operator, n = $.fn.mvcgrid.lang.Number; e.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + ("Equals" == t.first.type ? ' selected="selected"' : "") + ">" + n.Equals + '</option><option value="LessThan"' + ("LessThan" == t.first.type ? ' selected="selected"' : "") + ">" + n.LessThan + '</option><option value="GreaterThan"' + ("GreaterThan" == t.first.type ? ' selected="selected"' : "") + ">" + n.GreaterThan + '</option><option value="LessThanOrEqual"' + ("LessThanOrEqual" == t.first.type ? ' selected="selected"' : "") + ">" + n.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + ("GreaterThanOrEqual" == t.first.type ? ' selected="selected"' : "") + ">" + n.GreaterThanOrEqual + '</option></select></div><div class="first-filter popup-group"><input class="mvc-grid-input" type="text" value="' + t.first.val + '"></div>' + (t.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + r.Select + '</option><option value="And"' + ("And" == t.operator ? ' selected="selected"' : "") + ">" + r.And + '</option><option value="Or"' + ("Or" == t.operator ? ' selected="selected"' : "") + ">" + r.Or + '</option></select></div><div class="second-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + ("Equals" == t.second.type ? ' selected="selected"' : "") + ">" + n.Equals + '</option><option value="LessThan"' + ("LessThan" == t.second.type ? ' selected="selected"' : "") + ">" + n.LessThan + '</option><option value="GreaterThan"' + ("GreaterThan" == t.second.type ? ' selected="selected"' : "") + ">" + n.GreaterThan + '</option><option value="LessThanOrEqual"' + ("LessThanOrEqual" == t.second.type ? ' selected="selected"' : "") + ">" + n.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + ("GreaterThanOrEqual" == t.second.type ? ' selected="selected"' : "") + ">" + n.GreaterThanOrEqual + '</option></select></div><div class="second-filter popup-group"><input class="mvc-grid-input" type="text" value="' + t.second.val + '"></div>' : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + i.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + i.Remove + "</button></div></div>") }, init: function (e, t, i) { this.bindType(e, t, i), this.bindValue(e, t, i), this.bindApply(e, t, i), this.bindCancel(e, t, i), this.bindOperator(e, t, i) }, bindType: function (e, t, i) { var r = i.find(".first-filter .mvc-grid-type"); r.on("change.mvcgrid", function () { t.filter.first.type = this.value }), r.change(); var n = i.find(".second-filter .mvc-grid-type"); n.on("change.mvcgrid", function () { t.filter.second.type = this.value }), n.change() }, bindValue: function (e, t, i) { var r = this, n = i.find(".first-filter .mvc-grid-input"); n.on("keyup.mvcgrid", function (e) { t.filter.first.val = this.value, r.isValid(this.value) ? ($(this).removeClass("invalid"), 13 == e.which && i.find(".mvc-grid-apply").click()) : $(this).addClass("invalid") }), r.isValid(t.filter.first.val) || n.addClass("invalid"); var a = i.find(".second-filter .mvc-grid-input"); a.on("keyup.mvcgrid", function (e) { t.filter.second.val = this.value, r.isValid(this.value) ? ($(this).removeClass("invalid"), 13 == e.which && i.find(".mvc-grid-apply").click()) : $(this).addClass("invalid") }), r.isValid(t.filter.second.val) || a.addClass("invalid") }, bindApply: function (e, t, i) { var r = i.find(".mvc-grid-apply"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQuery(t)) }) }, bindCancel: function (e, t, i) { var r = i.find(".mvc-grid-cancel"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQueryWithout(t)) }) }, bindOperator: function (e, t, i) { var r = i.find(".mvc-grid-operator"); r.on("change.mvcgrid", function () { t.filter.operator = this.value }) }, isValid: function (e) { if ("" == e) return !0; var t = new RegExp("^(?=.*\\d+.*)[-+]?\\d*[.,]?\\d*$"); return t.test(e) } }, e }(), MvcGridDateFilter = function () { function e() { } return e.prototype = { render: function (e, t) { var i = '<input class="mvc-grid-input" type="text" value="' + t.first.val + '">', r = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter, n = $.fn.mvcgrid.lang.Operator, a = $.fn.mvcgrid.lang.Date; e.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + ("Equals" == t.first.type ? ' selected="selected"' : "") + ">" + a.Equals + '</option><option value="LessThan"' + ("LessThan" == t.first.type ? ' selected="selected"' : "") + ">" + a.LessThan + '</option><option value="GreaterThan"' + ("GreaterThan" == t.first.type ? ' selected="selected"' : "") + ">" + a.GreaterThan + '</option><option value="LessThanOrEqual"' + ("LessThanOrEqual" == t.first.type ? ' selected="selected"' : "") + ">" + a.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + ("GreaterThanOrEqual" == t.first.type ? ' selected="selected"' : "") + ">" + a.GreaterThanOrEqual + '</option></select></div><div class="first-filter popup-group">' + i + "</div>" + (t.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + n.Select + '</option><option value="And"' + ("And" == t.operator ? ' selected="selected"' : "") + ">" + n.And + '</option><option value="Or"' + ("Or" == t.operator ? ' selected="selected"' : "") + ">" + n.Or + '</option></select></div><div class="second-filter popup-group"><select class="mvc-grid-type"><option value="Equals"' + ("Equals" == t.second.type ? ' selected="selected"' : "") + ">" + a.Equals + '</option><option value="LessThan"' + ("LessThan" == t.second.type ? ' selected="selected"' : "") + ">" + a.LessThan + '</option><option value="GreaterThan"' + ("GreaterThan" == t.second.type ? ' selected="selected"' : "") + ">" + a.GreaterThan + '</option><option value="LessThanOrEqual"' + ("LessThanOrEqual" == t.second.type ? ' selected="selected"' : "") + ">" + a.LessThanOrEqual + '</option><option value="GreaterThanOrEqual"' + ("GreaterThanOrEqual" == t.second.type ? ' selected="selected"' : "") + ">" + a.GreaterThanOrEqual + '</option></select></div><div class="second-filter popup-group">' + i + "</div>" : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + r.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + r.Remove + "</button></div></div>") }, init: function (e, t, i) { this.bindType(e, t, i), this.bindValue(e, t, i), this.bindApply(e, t, i), this.bindCancel(e, t, i), this.bindOperator(e, t, i) }, bindType: function (e, t, i) { var r = i.find(".first-filter .mvc-grid-type"); r.on("change.mvcgrid", function () { t.filter.first.type = this.value }), r.change(); var n = i.find(".second-filter .mvc-grid-type"); n.on("change.mvcgrid", function () { t.filter.second.type = this.value }), n.change() }, bindValue: function (e, t, i) { var r = i.find(".first-filter .mvc-grid-input"); $.fn.datepicker && r.datepicker(), r.on("change.mvcgrid keyup.mvcgrid", function (e) { t.filter.first.val = this.value, 13 == e.which && i.find(".mvc-grid-apply").click() }); var n = i.find(".second-filter .mvc-grid-input"); $.fn.datepicker && n.datepicker(), n.on("change.mvcgrid keyup.mvcgrid", function (e) { t.filter.second.val = this.value, 13 == e.which && i.find(".mvc-grid-apply").click() }) }, bindApply: function (e, t, i) { var r = i.find(".mvc-grid-apply"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQuery(t)) }) }, bindCancel: function (e, t, i) { var r = i.find(".mvc-grid-cancel"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQueryWithout(t)) }) }, bindOperator: function (e, t, i) { var r = i.find(".mvc-grid-operator"); r.on("change.mvcgrid", function () { t.filter.operator = this.value }) } }, e }(), MvcGridBooleanFilter = function () { function e() { } return e.prototype = { render: function (e, t) { var i = $.fn.mvcgrid.lang.Filter || $.fn.mvcgrid.defaultLang.Filter, r = $.fn.mvcgrid.lang.Operator, n = $.fn.mvcgrid.lang.Boolean; e.html('<div class="popup-arrow"></div><div class="popup-content"><div class="first-filter popup-group"><ul class="mvc-grid-boolean-filter"><li ' + ("True" == t.first.val ? 'class="active" ' : "") + 'data-value="True">' + n.Yes + "</li><li " + ("False" == t.first.val ? 'class="active" ' : "") + 'data-value="False">' + n.No + "</li></ul></div>" + (t.isMulti ? '<div class="popup-group popup-group-operator"><select class="mvc-grid-operator"><option value="">' + r.Select + '</option><option value="And"' + ("And" == t.operator ? ' selected="selected"' : "") + ">" + r.And + '</option><option value="Or"' + ("Or" == t.operator ? ' selected="selected"' : "") + ">" + r.Or + '</option></select></div><div class="second-filter popup-group"><ul class="mvc-grid-boolean-filter"><li ' + ("True" == t.second.val ? 'class="active" ' : "") + 'data-value="True">' + n.Yes + "</li><li " + ("False" == t.second.val ? 'class="active" ' : "") + 'data-value="False">' + n.No + "</li></ul></div>" : "") + '<div class="popup-button-group"><button class="btn btn-success mvc-grid-apply" type="button">' + i.Apply + '</button><button class="btn btn-danger mvc-grid-cancel" type="button">' + i.Remove + "</button></div></div>") }, init: function (e, t, i) { this.bindValue(e, t, i), this.bindApply(e, t, i), this.bindCancel(e, t, i), this.bindOperator(e, t, i) }, bindValue: function (e, t, i) { var r = i.find(".first-filter .mvc-grid-boolean-filter li"); t.filter.first.type = "Equals", r.on("click.mvcgrid", function () { var e = $(this); t.filter.first.val = e.data("value"), e.siblings().removeClass("active"), e.addClass("active") }); var n = i.find(".second-filter .mvc-grid-boolean-filter li"); t.filter.second.type = "Equals", n.on("click.mvcgrid", function () { var e = $(this); t.filter.second.val = e.data("value"), e.siblings().removeClass("active"), e.addClass("active") }) }, bindApply: function (e, t, i) { var r = i.find(".mvc-grid-apply"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQuery(t)) }) }, bindCancel: function (e, t, i) { var r = i.find(".mvc-grid-cancel"); r.on("click.mvcgrid", function () { i.removeClass("open"), e.reload(e.formFilterQueryWithout(t)) }) }, bindOperator: function (e, t, i) { var r = i.find(".mvc-grid-operator"); r.on("change.mvcgrid", function () { t.filter.operator = this.value }) } }, e }(); $.fn.mvcgrid = function (e) { return this.each(function () { $.data(this, "mvc-grid") ? e && $.data(this, "mvc-grid").set(e) : $.data(this, "mvc-grid", new MvcGrid($(this), e)) }) }, $.fn.mvcgrid.defaultLang = { Text: { Contains: "Contains", Equals: "Equals", StartsWith: "Starts with", EndsWith: "Ends with" }, Number: { Equals: "Equals", LessThan: "Less than", GreaterThan: "Greater than", LessThanOrEqual: "Less than or equal", GreaterThanOrEqual: "Greater than or equal" }, Date: { Equals: "Equals", LessThan: "Is before", GreaterThan: "Is after", LessThanOrEqual: "Is before or equal", GreaterThanOrEqual: "Is after or equal" }, Boolean: { Yes: "Yes", No: "No" }, Filter: { Apply: "&#10004;", Remove: "&#10008;" }, Operator: { Select: "", And: "and", Or: "or" } }, $.fn.mvcgrid.lang = $.fn.mvcgrid.defaultLang, $(function () { $("body").append('<div class="mvc-grid-popup"></div>'), $(window).resize(function () { $(".mvc-grid-popup").removeClass("open") }) });